{"version":3,"sources":["./src/app/products/product-edit/product-edit.component.ts","./src/app/products/product-edit/product-edit.component.html","./src/app/products/product-list/product-list.component.ts","./src/app/products/product-list/product-list.component.html","./src/app/products/product-shell/product-shell.component.ts","./src/app/products/product-shell/product-shell.component.html","./src/app/products/product.module.ts","./src/app/products/product.service.ts","./src/app/products/state/product.actions.ts","./src/app/products/state/product.effects.ts","./src/app/products/state/product.reducer.ts","./src/app/shared/generic-validator.ts","./src/app/shared/number.validator.ts"],"names":[],"mappings":"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","file":"products-product-module-es2015.js","sourcesContent":["import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { Observable, Subscription } from \"rxjs\";\n\nimport { Product } from \"../product\";\nimport { ProductService } from \"../product.service\";\nimport { GenericValidator } from \"../../shared/generic-validator\";\nimport { NumberValidators } from \"../../shared/number.validator\";\nimport { Store } from \"@ngrx/store\";\nimport { State } from \"src/app/app.state\";\nimport { getCurrentProduct } from \"../state/product.reducer\";\nimport * as ProductsActions from \"../state/product.actions\";\nimport { tap } from \"rxjs/operators\";\n\n@Component({\n  selector: \"pm-product-edit\",\n  templateUrl: \"./product-edit.component.html\",\n})\nexport class ProductEditComponent implements OnInit {\n  pageTitle = \"Product Edit\";\n  errorMessage = \"\";\n  productForm: FormGroup;\n\n  product$: Observable<Product | null> = this._store\n    .select(getCurrentProduct)\n    .pipe(tap((product) => this.displayProduct(product)));\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n  constructor(\n    private fb: FormBuilder,\n    private productService: ProductService,\n    private _store: Store<State>\n  ) {\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: \"Product name is required.\",\n        minlength: \"Product name must be at least three characters.\",\n        maxlength: \"Product name cannot exceed 50 characters.\",\n      },\n      productCode: {\n        required: \"Product code is required.\",\n      },\n      starRating: {\n        range: \"Rate the product between 1 (lowest) and 5 (highest).\",\n      },\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    // Define the form group\n    this.productForm = this.fb.group({\n      productName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      ],\n      productCode: [\"\", Validators.required],\n      starRating: [\"\", NumberValidators.range(1, 5)],\n      description: \"\",\n    });\n\n    // Watch for changes to the currently selected product\n\n    // Watch for value changes for validation\n    this.productForm.valueChanges.subscribe(\n      () =>\n        (this.displayMessage = this.genericValidator.processMessages(\n          this.productForm\n        ))\n    );\n    this._store.select(getCurrentProduct).subscribe({\n      next: (product) => this.displayProduct(product),\n    });\n  }\n\n  // Also validate on blur\n  // Helpful if the user tabs through required fields\n  blur(): void {\n    this.displayMessage = this.genericValidator.processMessages(\n      this.productForm\n    );\n  }\n\n  displayProduct(product: Product | null): void {\n    if (product) {\n      // Reset the form back to pristine\n      this.productForm.reset();\n\n      // Display the appropriate page title\n      if (product.id === 0) {\n        this.pageTitle = \"Add Product\";\n      } else {\n        this.pageTitle = `Edit Product: ${product.productName}`;\n      }\n\n      // Update the data on the form\n      this.productForm.patchValue({\n        productName: product.productName,\n        productCode: product.productCode,\n        starRating: product.starRating,\n        description: product.description,\n      });\n    }\n  }\n\n  cancelEdit(product: Product): void {\n    // Redisplay the currently selected product\n    // replacing any edits made\n    this.displayProduct(product);\n  }\n\n  deleteProduct(product: Product): void {\n    if (product && product.id) {\n      if (confirm(`Really delete the product: ${product.productName}?`)) {\n        this.productService.deleteProduct(product.id).subscribe({\n          next: () =>\n            this._store.dispatch(ProductsActions.clearCurrentProduct()),\n          error: (err) => (this.errorMessage = err),\n        });\n      }\n    } else {\n      // No need to delete, it was never saved\n      this._store.dispatch(ProductsActions.clearCurrentProduct());\n    }\n  }\n\n  saveProduct(originalProduct: Product): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        // Copy over all of the original product properties\n        // Then copy over the values from the form\n        // This ensures values not on the form, such as the Id, are retained\n        const product = { ...originalProduct, ...this.productForm.value };\n\n        if (product.id === 0) {\n          this.productService.createProduct(product).subscribe({\n            next: (p) =>\n              this._store.dispatch(\n                ProductsActions.setCurrentProduct({ product: p })\n              ),\n            error: (err) => (this.errorMessage = err),\n          });\n        } else {\n          this.productService.updateProduct(product).subscribe({\n            next: (p) =>\n              this._store.dispatch(\n                ProductsActions.setCurrentProduct({ product: p })\n              ),\n            error: (err) => (this.errorMessage = err),\n          });\n        }\n      }\n    }\n  }\n}\n","<div class=\"card\" *ngIf=\"product$ | async as product\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n  <div class=\"card-body\">\n    <form\n      novalidate\n      (ngSubmit)=\"saveProduct(product)\"\n      [formGroup]=\"productForm\"\n    >\n      <fieldset>\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productNameId\"\n            >Product Name</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productName }\"\n              class=\"form-control\"\n              id=\"productNameId\"\n              type=\"text\"\n              placeholder=\"Name (required)\"\n              formControlName=\"productName\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productName\">\n              {{ displayMessage.productName }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productCodeId\"\n            >Product Code</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productCode }\"\n              class=\"form-control\"\n              id=\"productCodeId\"\n              type=\"text\"\n              placeholder=\"Code (required)\"\n              formControlName=\"productCode\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productCode\">\n              {{ displayMessage.productCode }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"starRatingId\"\n            >Star Rating (1-5)</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.starRating }\"\n              class=\"form-control\"\n              id=\"starRatingId\"\n              type=\"text\"\n              placeholder=\"Rating\"\n              formControlName=\"starRating\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.starRating\">\n              {{ displayMessage.starRating }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"descriptionId\"\n            >Description</label\n          >\n\n          <div class=\"col-md-9\">\n            <textarea\n              [ngClass]=\"{ 'is-invalid': displayMessage.description }\"\n              class=\"form-control\"\n              id=\"descriptionId\"\n              placeholder=\"Description\"\n              rows=\"3\"\n              formControlName=\"description\"\n            >\n            </textarea>\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.description\">\n              {{ displayMessage.description }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <div class=\"col-md-10 col-md-offset-2\">\n            <span>\n              <button\n                class=\"btn btn-primary\"\n                type=\"submit\"\n                style=\"width: 80px; margin-right: 10px\"\n                [disabled]=\"!productForm.valid || !productForm.dirty\"\n              >\n                Save\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"width: 80px; margin-right: 10px\"\n                (click)=\"cancelEdit(product)\"\n              >\n                Cancel\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"width: 80px\"\n                (click)=\"deleteProduct(product)\"\n              >\n                Delete\n              </button>\n            </span>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </div>\n</div>\n<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\n\nimport { Observable, Subscription } from \"rxjs\";\n\nimport { Product } from \"../product\";\nimport { ProductService } from \"../product.service\";\nimport {\n  getCurrentProduct,\n  getError,\n  getProducts,\n  getShowProductCode,\n  State,\n} from \"../state/product.reducer\";\n\nimport * as ProductsActions from \"../state/product.actions\";\n\n@Component({\n  selector: \"pm-product-list\",\n  templateUrl: \"./product-list.component.html\",\n  styleUrls: [\"./product-list.component.css\"],\n})\nexport class ProductListComponent implements OnInit {\n  pageTitle = \"Products\";\n  errorMessage$: Observable<string> = this._store.select(getError);\n  // Declarative abroach\n  displayCode$: Observable<boolean> = this._store.select(getShowProductCode);\n\n  products$: Observable<Product[]> = this._store.select(getProducts);\n\n  // getCurrentProduct\n\n  selectedProduct$: Observable<Product> = this._store.select(getCurrentProduct);\n\n  constructor(\n    private productService: ProductService,\n    private _store: Store<State>\n  ) {}\n\n  ngOnInit(): void {\n    this._store.dispatch(ProductsActions.loadProducts());\n    // this.sub = this.productService.selectedProductChanges$.subscribe(\n    //   (currentProduct) => (this.selectedProduct = currentProduct)\n    // );\n\n    // this.productService.getProducts().subscribe({\n    //   next: (products: Product[]) => (this.products = products),\n    //   error: (err) => (this.errorMessage = err),\n    // });\n  }\n\n  // \"[Product] Cash Products\"\n  checkChanged(): void {\n    this._store.dispatch(ProductsActions.toggleProductCode());\n  }\n\n  newProduct(): void {\n    this._store.dispatch(ProductsActions.InitializeCurrentProduct());\n  }\n\n  productSelected(product: Product): void {\n    this._store.dispatch(ProductsActions.setCurrentProduct({ product }));\n\n    // this.productService.changeSelectedProduct(product);\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n\n  <div class=\"card-body\" *ngIf=\"products$ | async as products\">\n    <div class=\"list-group\">\n      <button\n        class=\"list-group-item list-group-item-action rounded-0\"\n        *ngFor=\"let product of products\"\n        [ngClass]=\"{ active: product?.id === (selectedProduct$ | async)?.id }\"\n        (click)=\"productSelected(product)\"\n      >\n        {{ product.productName }}\n        <ng-container *ngIf=\"displayCode$ | async\">\n          ({{ product.productCode }})\n        </ng-container>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"card-footer\">\n    <div class=\"row\">\n      <div class=\"form-check col-md-7\">\n        <label>\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            (change)=\"checkChanged()\"\n            [checked]=\"displayCode$ | async\"\n          />\n          Display Product Code\n        </label>\n      </div>\n      <div class=\"col-md-4 text-right\">\n        <button class=\"btn btn-primary\" (click)=\"newProduct()\">Add</button>\n      </div>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"errorMessage$ | async as errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  templateUrl: './product-shell.component.html'\n})\nexport class ProductShellComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","<div class='row'>\n  <div class='col-md-4'>\n    <pm-product-list></pm-product-list>\n  </div>\n  <div class='col-md-8'>\n    <pm-product-edit></pm-product-edit>\n  </div>\n</div>","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { ProductShellComponent } from \"./product-shell/product-shell.component\";\nimport { ProductListComponent } from \"./product-list/product-list.component\";\nimport { ProductEditComponent } from \"./product-edit/product-edit.component\";\n\n// NGRX\nimport { StoreModule } from \"@ngrx/store\";\nimport { productReducer } from \"./state/product.reducer\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ProductEffects } from \"./state/product.effects\";\n\nconst productRoutes: Routes = [{ path: \"\", component: ProductShellComponent }];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(productRoutes),\n    StoreModule.forFeature(\"products\", productReducer),\n    EffectsModule.forFeature([ProductEffects]),\n  ],\n  declarations: [\n    ProductShellComponent,\n    ProductListComponent,\n    ProductEditComponent,\n  ],\n})\nexport class ProductModule {}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, tap, map } from \"rxjs/operators\";\n\nimport { Product } from \"./product\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService {\n  private productsUrl = \"api/products\";\n\n  constructor(private http: HttpClient) {}\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  createProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    // Product Id must be null for the Web API to assign an Id\n    const newProduct = { ...product, id: null };\n    return this.http\n      .post<Product>(this.productsUrl, newProduct, { headers })\n      .pipe(\n        tap((data) => console.log(\"createProduct: \" + JSON.stringify(data))),\n\n        catchError(this.handleError)\n      );\n  }\n\n  deleteProduct(id: number): Observable<{}> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete<Product>(url, { headers }).pipe(\n      tap((data) => console.log(\"deleteProduct: \" + id)),\n\n      catchError(this.handleError)\n    );\n  }\n\n  updateProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put<Product>(url, product, { headers }).pipe(\n      tap(() => console.log(\"updateProduct: \" + product.id)),\n      // Update the item in the list\n      // This is required because the selected product that was edited\n      // was a copy of the item from the array.\n\n      // Return the product on an update\n      map(() => product),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(err: any) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\n","import { createAction, props } from \"@ngrx/store\";\r\nimport { Product } from \"../product\";\r\n\r\nexport const toggleProductCode = createAction(\"[Product] Toggle product code\");\r\n\r\nexport const setCurrentProduct = createAction(\r\n  \"[Product] Set Current product\",\r\n  props<{ product: Product }>()\r\n);\r\n\r\nexport const clearCurrentProduct = createAction(\r\n  \"[Product] Clear Current product\"\r\n);\r\n\r\nexport const InitializeCurrentProduct = createAction(\r\n  \"[Product] Initialize Current product\"\r\n);\r\n\r\nexport const loadProducts = createAction(\"[Product] Load\");\r\n\r\nexport const loadProductsSuccess = createAction(\r\n  \"[Product] Load Success\",\r\n  props<{ products: Product[] }>()\r\n);\r\n\r\nexport const loadProductsFailure = createAction(\r\n  \"[Product] Load Fail\",\r\n  props<{ error: string }>()\r\n);\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs\";\r\nimport { catchError, map, mergeMap, switchMap } from \"rxjs/operators\";\r\nimport { ProductService } from \"../product.service\";\r\nimport * as ProductsActions from \"../state/product.actions\";\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private _productService: ProductService\r\n  ) {}\r\n\r\n  loadProducts$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductsActions.loadProducts),\r\n      switchMap(() =>\r\n        this._productService.getProducts().pipe(\r\n          map((products) => ProductsActions.loadProductsSuccess({ products })),\r\n          catchError((error) =>\r\n            of(ProductsActions.loadProductsFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createReducer,\r\n  createSelector,\r\n  on,\r\n} from \"@ngrx/store\";\r\nimport { Product } from \"../product\";\r\n\r\nimport * as AppState from \"../../app.state\";\r\n\r\nimport * as ProductsActions from \"./product.actions\";\r\n\r\nexport interface State extends AppState.State {\r\n  products: ProductState;\r\n}\r\n\r\nexport interface ProductState {\r\n  showProductsCode: boolean;\r\n  currentProduct: Product;\r\n  products: Product[];\r\n  error: string;\r\n}\r\n\r\nconst initialState: ProductState = {\r\n  showProductsCode: false,\r\n  currentProduct: null,\r\n  products: [],\r\n  error: null,\r\n};\r\n\r\n// create selector\r\nconst getProductFeatureState = createFeatureSelector<ProductState>(\"products\");\r\n\r\n// now cat create any selector for any ProductState property\r\nexport const getShowProductCode = createSelector(\r\n  getProductFeatureState,\r\n  // state function is a projector function\r\n  (state) => state.showProductsCode\r\n);\r\n\r\nexport const getCurrentProduct = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.currentProduct\r\n);\r\n\r\nexport const getProducts = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.products\r\n);\r\n\r\nexport const getError = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.error\r\n);\r\n\r\nexport const productReducer = createReducer<ProductState>(\r\n  initialState, //Initial State for showProductCode\r\n  on(ProductsActions.toggleProductCode, (state): ProductState => {\r\n    // this [(createAction(\"[Product] Toggle product code\")] will show on developer tools\r\n    // console.log(JSON.stringify(state));\r\n    return {\r\n      ...state,\r\n      showProductsCode: !state.showProductsCode,\r\n    };\r\n  }),\r\n  on(ProductsActions.setCurrentProduct, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: action.product,\r\n    };\r\n  }),\r\n  on(ProductsActions.clearCurrentProduct, (state): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: null,\r\n    };\r\n  }),\r\n  on(ProductsActions.InitializeCurrentProduct, (state): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: {\r\n        id: 0,\r\n        productName: \"\",\r\n        productCode: \"New\",\r\n        description: \"\",\r\n        starRating: 0,\r\n      },\r\n    };\r\n  }),\r\n  on(ProductsActions.loadProductsSuccess, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      products: action.products,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(ProductsActions.loadProductsFailure, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      products: [],\r\n      error: action.error,\r\n    };\r\n  })\r\n);\r\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n  }\n\n  // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n  processMessages(container: FormGroup): { [key: string]: string } {\n    const messages = {};\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map(messageKey => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n\n    static range(min: number, max: number): ValidatorFn {\n        return (c: AbstractControl): { [key: string]: boolean } | null => {\n            if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n                return { range: true };\n            }\n            return null;\n        };\n    }\n}\n"],"sourceRoot":"webpack:///"}