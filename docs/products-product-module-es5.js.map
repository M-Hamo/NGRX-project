{"version":3,"sources":["webpack:///src/app/products/product-edit/product-edit.component.ts","webpack:///src/app/products/product-edit/product-edit.component.html","webpack:///src/app/products/product-list/product-list.component.ts","webpack:///src/app/products/product-list/product-list.component.html","webpack:///src/app/products/product-shell/product-shell.component.ts","webpack:///src/app/products/product-shell/product-shell.component.html","webpack:///src/app/products/product.module.ts","webpack:///src/app/products/product.service.ts","webpack:///src/app/products/state/product.actions.ts","webpack:///src/app/products/state/product.effects.ts","webpack:///src/app/products/state/product.reducer.ts","webpack:///src/app/shared/generic-validator.ts","webpack:///src/app/shared/number.validator.ts"],"names":["ProductEditComponent","fb","productService","_store","pageTitle","errorMessage","product$","select","pipe","product","displayProduct","displayMessage","validationMessages","productName","required","minlength","maxlength","productCode","starRating","range","genericValidator","productForm","group","minLength","maxLength","description","valueChanges","subscribe","processMessages","next","reset","id","patchValue","confirm","deleteProduct","dispatch","error","err","originalProduct","valid","dirty","value","createProduct","p","updateProduct","selector","templateUrl","ProductListComponent","errorMessage$","displayCode$","products$","selectedProduct$","checkChanged","newProduct","styleUrls","ProductShellComponent","productRoutes","path","component","ProductModule","forChild","forFeature","imports","declarations","ProductService","http","productsUrl","get","handleError","headers","post","data","console","log","JSON","stringify","url","put","ErrorEvent","message","status","body","providedIn","toggleProductCode","setCurrentProduct","clearCurrentProduct","InitializeCurrentProduct","loadProducts","loadProductsSuccess","loadProductsFailure","ProductEffects","actions$","_productService","loadProducts$","getProducts","products","initialState","showProductsCode","currentProduct","getProductFeatureState","getShowProductCode","state","getCurrentProduct","getError","productReducer","action","GenericValidator","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","Object","assign","touched","errors","keys","map","messageKey","NumberValidators","min","max","isNaN"],"mappings":"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","file":"products-product-module-es5.js","sourcesContent":["import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { Observable, Subscription } from \"rxjs\";\n\nimport { Product } from \"../product\";\nimport { ProductService } from \"../product.service\";\nimport { GenericValidator } from \"../../shared/generic-validator\";\nimport { NumberValidators } from \"../../shared/number.validator\";\nimport { Store } from \"@ngrx/store\";\nimport { State } from \"src/app/app.state\";\nimport { getCurrentProduct } from \"../state/product.reducer\";\nimport * as ProductsActions from \"../state/product.actions\";\nimport { tap } from \"rxjs/operators\";\n\n@Component({\n  selector: \"pm-product-edit\",\n  templateUrl: \"./product-edit.component.html\",\n})\nexport class ProductEditComponent implements OnInit {\n  pageTitle = \"Product Edit\";\n  errorMessage = \"\";\n  productForm: FormGroup;\n\n  product$: Observable<Product | null> = this._store\n    .select(getCurrentProduct)\n    .pipe(tap((product) => this.displayProduct(product)));\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n  constructor(\n    private fb: FormBuilder,\n    private productService: ProductService,\n    private _store: Store<State>\n  ) {\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: \"Product name is required.\",\n        minlength: \"Product name must be at least three characters.\",\n        maxlength: \"Product name cannot exceed 50 characters.\",\n      },\n      productCode: {\n        required: \"Product code is required.\",\n      },\n      starRating: {\n        range: \"Rate the product between 1 (lowest) and 5 (highest).\",\n      },\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    // Define the form group\n    this.productForm = this.fb.group({\n      productName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      ],\n      productCode: [\"\", Validators.required],\n      starRating: [\"\", NumberValidators.range(1, 5)],\n      description: \"\",\n    });\n\n    // Watch for changes to the currently selected product\n\n    // Watch for value changes for validation\n    this.productForm.valueChanges.subscribe(\n      () =>\n        (this.displayMessage = this.genericValidator.processMessages(\n          this.productForm\n        ))\n    );\n    this._store.select(getCurrentProduct).subscribe({\n      next: (product) => this.displayProduct(product),\n    });\n  }\n\n  // Also validate on blur\n  // Helpful if the user tabs through required fields\n  blur(): void {\n    this.displayMessage = this.genericValidator.processMessages(\n      this.productForm\n    );\n  }\n\n  displayProduct(product: Product | null): void {\n    if (product) {\n      // Reset the form back to pristine\n      this.productForm.reset();\n\n      // Display the appropriate page title\n      if (product.id === 0) {\n        this.pageTitle = \"Add Product\";\n      } else {\n        this.pageTitle = `Edit Product: ${product.productName}`;\n      }\n\n      // Update the data on the form\n      this.productForm.patchValue({\n        productName: product.productName,\n        productCode: product.productCode,\n        starRating: product.starRating,\n        description: product.description,\n      });\n    }\n  }\n\n  cancelEdit(product: Product): void {\n    // Redisplay the currently selected product\n    // replacing any edits made\n    this.displayProduct(product);\n  }\n\n  deleteProduct(product: Product): void {\n    if (product && product.id) {\n      if (confirm(`Really delete the product: ${product.productName}?`)) {\n        this.productService.deleteProduct(product.id).subscribe({\n          next: () =>\n            this._store.dispatch(ProductsActions.clearCurrentProduct()),\n          error: (err) => (this.errorMessage = err),\n        });\n      }\n    } else {\n      // No need to delete, it was never saved\n      this._store.dispatch(ProductsActions.clearCurrentProduct());\n    }\n  }\n\n  saveProduct(originalProduct: Product): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        // Copy over all of the original product properties\n        // Then copy over the values from the form\n        // This ensures values not on the form, such as the Id, are retained\n        const product = { ...originalProduct, ...this.productForm.value };\n\n        if (product.id === 0) {\n          this.productService.createProduct(product).subscribe({\n            next: (p) =>\n              this._store.dispatch(\n                ProductsActions.setCurrentProduct({ product: p })\n              ),\n            error: (err) => (this.errorMessage = err),\n          });\n        } else {\n          this.productService.updateProduct(product).subscribe({\n            next: (p) =>\n              this._store.dispatch(\n                ProductsActions.setCurrentProduct({ product: p })\n              ),\n            error: (err) => (this.errorMessage = err),\n          });\n        }\n      }\n    }\n  }\n}\n","<div class=\"card\" *ngIf=\"product$ | async as product\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n  <div class=\"card-body\">\n    <form\n      novalidate\n      (ngSubmit)=\"saveProduct(product)\"\n      [formGroup]=\"productForm\"\n    >\n      <fieldset>\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productNameId\"\n            >Product Name</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productName }\"\n              class=\"form-control\"\n              id=\"productNameId\"\n              type=\"text\"\n              placeholder=\"Name (required)\"\n              formControlName=\"productName\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productName\">\n              {{ displayMessage.productName }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productCodeId\"\n            >Product Code</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productCode }\"\n              class=\"form-control\"\n              id=\"productCodeId\"\n              type=\"text\"\n              placeholder=\"Code (required)\"\n              formControlName=\"productCode\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productCode\">\n              {{ displayMessage.productCode }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"starRatingId\"\n            >Star Rating (1-5)</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.starRating }\"\n              class=\"form-control\"\n              id=\"starRatingId\"\n              type=\"text\"\n              placeholder=\"Rating\"\n              formControlName=\"starRating\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.starRating\">\n              {{ displayMessage.starRating }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"descriptionId\"\n            >Description</label\n          >\n\n          <div class=\"col-md-9\">\n            <textarea\n              [ngClass]=\"{ 'is-invalid': displayMessage.description }\"\n              class=\"form-control\"\n              id=\"descriptionId\"\n              placeholder=\"Description\"\n              rows=\"3\"\n              formControlName=\"description\"\n            >\n            </textarea>\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.description\">\n              {{ displayMessage.description }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <div class=\"col-md-10 col-md-offset-2\">\n            <span>\n              <button\n                class=\"btn btn-primary\"\n                type=\"submit\"\n                style=\"width: 80px; margin-right: 10px\"\n                [disabled]=\"!productForm.valid || !productForm.dirty\"\n              >\n                Save\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"width: 80px; margin-right: 10px\"\n                (click)=\"cancelEdit(product)\"\n              >\n                Cancel\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"width: 80px\"\n                (click)=\"deleteProduct(product)\"\n              >\n                Delete\n              </button>\n            </span>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </div>\n</div>\n<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\n\nimport { Observable, Subscription } from \"rxjs\";\n\nimport { Product } from \"../product\";\nimport { ProductService } from \"../product.service\";\nimport {\n  getCurrentProduct,\n  getError,\n  getProducts,\n  getShowProductCode,\n  State,\n} from \"../state/product.reducer\";\n\nimport * as ProductsActions from \"../state/product.actions\";\n\n@Component({\n  selector: \"pm-product-list\",\n  templateUrl: \"./product-list.component.html\",\n  styleUrls: [\"./product-list.component.css\"],\n})\nexport class ProductListComponent implements OnInit {\n  pageTitle = \"Products\";\n  errorMessage$: Observable<string> = this._store.select(getError);\n  // Declarative abroach\n  displayCode$: Observable<boolean> = this._store.select(getShowProductCode);\n\n  products$: Observable<Product[]> = this._store.select(getProducts);\n\n  // getCurrentProduct\n\n  selectedProduct$: Observable<Product> = this._store.select(getCurrentProduct);\n\n  constructor(\n    private productService: ProductService,\n    private _store: Store<State>\n  ) {}\n\n  ngOnInit(): void {\n    this._store.dispatch(ProductsActions.loadProducts());\n    // this.sub = this.productService.selectedProductChanges$.subscribe(\n    //   (currentProduct) => (this.selectedProduct = currentProduct)\n    // );\n\n    // this.productService.getProducts().subscribe({\n    //   next: (products: Product[]) => (this.products = products),\n    //   error: (err) => (this.errorMessage = err),\n    // });\n  }\n\n  // \"[Product] Cash Products\"\n  checkChanged(): void {\n    this._store.dispatch(ProductsActions.toggleProductCode());\n  }\n\n  newProduct(): void {\n    this._store.dispatch(ProductsActions.InitializeCurrentProduct());\n  }\n\n  productSelected(product: Product): void {\n    this._store.dispatch(ProductsActions.setCurrentProduct({ product }));\n\n    // this.productService.changeSelectedProduct(product);\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n\n  <div class=\"card-body\" *ngIf=\"products$ | async as products\">\n    <div class=\"list-group\">\n      <button\n        class=\"list-group-item list-group-item-action rounded-0\"\n        *ngFor=\"let product of products\"\n        [ngClass]=\"{ active: product?.id === (selectedProduct$ | async)?.id }\"\n        (click)=\"productSelected(product)\"\n      >\n        {{ product.productName }}\n        <ng-container *ngIf=\"displayCode$ | async\">\n          ({{ product.productCode }})\n        </ng-container>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"card-footer\">\n    <div class=\"row\">\n      <div class=\"form-check col-md-7\">\n        <label>\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            (change)=\"checkChanged()\"\n            [checked]=\"displayCode$ | async\"\n          />\n          Display Product Code\n        </label>\n      </div>\n      <div class=\"col-md-4 text-right\">\n        <button class=\"btn btn-primary\" (click)=\"newProduct()\">Add</button>\n      </div>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"errorMessage$ | async as errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  templateUrl: './product-shell.component.html'\n})\nexport class ProductShellComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","<div class='row'>\n  <div class='col-md-4'>\n    <pm-product-list></pm-product-list>\n  </div>\n  <div class='col-md-8'>\n    <pm-product-edit></pm-product-edit>\n  </div>\n</div>","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { ProductShellComponent } from \"./product-shell/product-shell.component\";\nimport { ProductListComponent } from \"./product-list/product-list.component\";\nimport { ProductEditComponent } from \"./product-edit/product-edit.component\";\n\n// NGRX\nimport { StoreModule } from \"@ngrx/store\";\nimport { productReducer } from \"./state/product.reducer\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ProductEffects } from \"./state/product.effects\";\n\nconst productRoutes: Routes = [{ path: \"\", component: ProductShellComponent }];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(productRoutes),\n    StoreModule.forFeature(\"products\", productReducer),\n    EffectsModule.forFeature([ProductEffects]),\n  ],\n  declarations: [\n    ProductShellComponent,\n    ProductListComponent,\n    ProductEditComponent,\n  ],\n})\nexport class ProductModule {}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, tap, map } from \"rxjs/operators\";\n\nimport { Product } from \"./product\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService {\n  private productsUrl = \"api/products\";\n\n  constructor(private http: HttpClient) {}\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  createProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    // Product Id must be null for the Web API to assign an Id\n    const newProduct = { ...product, id: null };\n    return this.http\n      .post<Product>(this.productsUrl, newProduct, { headers })\n      .pipe(\n        tap((data) => console.log(\"createProduct: \" + JSON.stringify(data))),\n\n        catchError(this.handleError)\n      );\n  }\n\n  deleteProduct(id: number): Observable<{}> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete<Product>(url, { headers }).pipe(\n      tap((data) => console.log(\"deleteProduct: \" + id)),\n\n      catchError(this.handleError)\n    );\n  }\n\n  updateProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put<Product>(url, product, { headers }).pipe(\n      tap(() => console.log(\"updateProduct: \" + product.id)),\n      // Update the item in the list\n      // This is required because the selected product that was edited\n      // was a copy of the item from the array.\n\n      // Return the product on an update\n      map(() => product),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(err: any) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\n","import { createAction, props } from \"@ngrx/store\";\r\nimport { Product } from \"../product\";\r\n\r\nexport const toggleProductCode = createAction(\"[Product] Toggle product code\");\r\n\r\nexport const setCurrentProduct = createAction(\r\n  \"[Product] Set Current product\",\r\n  props<{ product: Product }>()\r\n);\r\n\r\nexport const clearCurrentProduct = createAction(\r\n  \"[Product] Clear Current product\"\r\n);\r\n\r\nexport const InitializeCurrentProduct = createAction(\r\n  \"[Product] Initialize Current product\"\r\n);\r\n\r\nexport const loadProducts = createAction(\"[Product] Load\");\r\n\r\nexport const loadProductsSuccess = createAction(\r\n  \"[Product] Load Success\",\r\n  props<{ products: Product[] }>()\r\n);\r\n\r\nexport const loadProductsFailure = createAction(\r\n  \"[Product] Load Fail\",\r\n  props<{ error: string }>()\r\n);\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs\";\r\nimport { catchError, map, mergeMap, switchMap } from \"rxjs/operators\";\r\nimport { ProductService } from \"../product.service\";\r\nimport * as ProductsActions from \"../state/product.actions\";\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private _productService: ProductService\r\n  ) {}\r\n\r\n  loadProducts$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductsActions.loadProducts),\r\n      switchMap(() =>\r\n        this._productService.getProducts().pipe(\r\n          map((products) => ProductsActions.loadProductsSuccess({ products })),\r\n          catchError((error) =>\r\n            of(ProductsActions.loadProductsFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createReducer,\r\n  createSelector,\r\n  on,\r\n} from \"@ngrx/store\";\r\nimport { Product } from \"../product\";\r\n\r\nimport * as AppState from \"../../app.state\";\r\n\r\nimport * as ProductsActions from \"./product.actions\";\r\n\r\nexport interface State extends AppState.State {\r\n  products: ProductState;\r\n}\r\n\r\nexport interface ProductState {\r\n  showProductsCode: boolean;\r\n  currentProduct: Product;\r\n  products: Product[];\r\n  error: string;\r\n}\r\n\r\nconst initialState: ProductState = {\r\n  showProductsCode: false,\r\n  currentProduct: null,\r\n  products: [],\r\n  error: null,\r\n};\r\n\r\n// create selector\r\nconst getProductFeatureState = createFeatureSelector<ProductState>(\"products\");\r\n\r\n// now cat create any selector for any ProductState property\r\nexport const getShowProductCode = createSelector(\r\n  getProductFeatureState,\r\n  // state function is a projector function\r\n  (state) => state.showProductsCode\r\n);\r\n\r\nexport const getCurrentProduct = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.currentProduct\r\n);\r\n\r\nexport const getProducts = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.products\r\n);\r\n\r\nexport const getError = createSelector(\r\n  getProductFeatureState,\r\n  (state) => state.error\r\n);\r\n\r\nexport const productReducer = createReducer<ProductState>(\r\n  initialState, //Initial State for showProductCode\r\n  on(ProductsActions.toggleProductCode, (state): ProductState => {\r\n    // this [(createAction(\"[Product] Toggle product code\")] will show on developer tools\r\n    // console.log(JSON.stringify(state));\r\n    return {\r\n      ...state,\r\n      showProductsCode: !state.showProductsCode,\r\n    };\r\n  }),\r\n  on(ProductsActions.setCurrentProduct, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: action.product,\r\n    };\r\n  }),\r\n  on(ProductsActions.clearCurrentProduct, (state): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: null,\r\n    };\r\n  }),\r\n  on(ProductsActions.InitializeCurrentProduct, (state): ProductState => {\r\n    return {\r\n      ...state,\r\n      currentProduct: {\r\n        id: 0,\r\n        productName: \"\",\r\n        productCode: \"New\",\r\n        description: \"\",\r\n        starRating: 0,\r\n      },\r\n    };\r\n  }),\r\n  on(ProductsActions.loadProductsSuccess, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      products: action.products,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(ProductsActions.loadProductsFailure, (state, action): ProductState => {\r\n    return {\r\n      ...state,\r\n      products: [],\r\n      error: action.error,\r\n    };\r\n  })\r\n);\r\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n  }\n\n  // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n  processMessages(container: FormGroup): { [key: string]: string } {\n    const messages = {};\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map(messageKey => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n\n    static range(min: number, max: number): ValidatorFn {\n        return (c: AbstractControl): { [key: string]: boolean } | null => {\n            if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n                return { range: true };\n            }\n            return null;\n        };\n    }\n}\n"]}